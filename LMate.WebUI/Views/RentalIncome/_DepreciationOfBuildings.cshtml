@using System.Activities.Statements
@using LMate.BusinessObjects
@model LMate.BusinessObjects.DepreciationBuilding

@{
    var depreciationMethondSelectList =
        new List<SelectListItem>()
        {
            new SelectListItem
            {
                Selected=false, Text = "Straight line method (SL)", Value = DepreciationMethod.StraightLineMethod.ToString()
            },
            new SelectListItem
            {
                Selected=false, Text = "Diminishing value method (DV)", Value = DepreciationMethod.DiminishingValueMethod.ToString()
            }
        };
}

<div>
    @Html.LabelFor(x => x.DatePurchased)
    @Html.TextBoxFor(x => x.DatePurchased)

    @Html.LabelFor(x => x.ConstructionMaterialsAndBuildingDescription)
    @Html.TextBoxFor(x => x.ConstructionMaterialsAndBuildingDescription)


    @Html.LabelFor(x => x.DepreciationMethond)
    @Html.DropDownListFor(x => x.DepreciationMethond, depreciationMethondSelectList)
    
    <p>
        @Html.Label(Model.DepreciationMethond == DepreciationMethod.StraightLineMethod
                    ? "Cost of buildings (excluding cost of land)"
                    : "Opening adjusted tax value")
        <span class="dollarSign">$</span>
        @Html.TextBoxFor(x => x.Value)
    </p>

    @Html.LabelFor(x => x.RatePercentage)
    @Html.TextBoxFor(x => x.RatePercentage)

    @Html.LabelFor(x => x.DepreciationClaimed)
    @Html.TextBoxFor(x => x.DepreciationClaimed)

    @if (Model.DepreciationMethond == DepreciationMethod.DiminishingValueMethod)
    {
        @Html.LabelFor(x => x.CloseingAdjustedTaxValue);
        @Html.TextBoxFor(x => x.CloseingAdjustedTaxValue);
    }
</div>
